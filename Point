//Dev Patel
//3/25/2019
//point on a coordinate plane can be represented by two values, an x-coordinate and a y-coordinate
#include <iostream>
#include<math.h>


struct Point
  {
      float x ,y;
  };

void display(Point p1);
int getQuadrant(Point p1);
float getSlope(Point p1, Point p2);
float getDistance(Point p1, Point p2);
float getMidpoint(Point p1, Point p2);

using namespace std;
int main()
{
    Point p1, p2, p3, p4;
    //P1 (3, 4), P2 (0, 0), P3 (-4, 5), P4 (3, 5)

    p1.x = 3;
    p1.y = 4;
    p2.x = 0;
    p2.y = 0;
    p3.x = -4;
    p3.y = 5;
    p4.x = 3;
    p4.y = 5;

   display(p1);
   display(p2);
   display(p3);
   display(p4);
   cout<<getQuadrant(p1)<<endl;
   cout<<getQuadrant(p2)<<endl;
  cout<<getQuadrant(p3)<<endl;
  cout<<getQuadrant(p4)<<endl;
   cout<<getSlope(p1,p2)<<endl;
  cout<<getSlope(p4,p1)<<endl;
   cout<<getSlope(p3,p4)<<endl;
   cout<<endl;
   cout<<getDistance(p1,p2)<<endl;
    cout<<getDistance(p3,p4)<<endl;
    cout<<endl;
    cout<<getMidpoint(p3,p4)<<endl;
   cout<<getMidpoint(p1,p2)<<endl;
    return 0;
}

void display(Point p1)
//post: Display (using cout) point p as an ordered pair, or “(x, y)”
{
        cout<<"Point ("<<p1.x<<","<<p1.y<<")"<<endl;
}

int getQuadrant(Point p)
{//post: returns which quadrant p is in, or 0 if it lies on an axis

   if (p.x > 0)
   {
       if (p.y > 0)
        return 1;
       else
        return 4;
   }
   else if (p.x < 0)
   {
       if (p.y > 0)
        return 2;
       else
         return 3;
   }
}

float getSlope(Point p1, Point p2 )
{
    if(p2.x-p1.x == 0)
        return -999.9;

    return (p2.y-p1.y)/(p2.x-p1.x);
}

    //return
float getDistance(Point p1, Point p2)
//post: returns the distance (using distance formula from algebra)
{
   return (sqrt((p2.x - p1.x)*2+((p2.y - p1.y)*2)));
}

float getMidpoint(Point p1, Point p2)
//post: returns the midpoint of p1 and p2
{
    float a ,b;

    a = ((p1.x + p2.x)/2.0);
    b = ((p1.y + p2.y)/2.0);

    return a, b;
}
